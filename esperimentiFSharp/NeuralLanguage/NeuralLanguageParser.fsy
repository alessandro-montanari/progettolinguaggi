%{
open AST
%}

// Simboli terminali
%token <string> ID
%token <string> ATTID
%token <string> PATH
%token <double> NUMBER
%token LOAD
%token PLUS MINUS TIMES FRAC POW NEG
%token AND OR NOT
%token LT LTE GT GTE EQ NOTEQ
%token SIN COS TAN ATAN LOG LN FLOOR CEIL SQRT
%token MEAN SD MIN MAX SUM SUMSQUARED
%toke LP RP LCB RCB LB RB COMMA NEWLINE COLON DOTS
%toke EOF

// Associatività operatori e priorità (priorità minore prima)
%left AND
%left OR
%left LT LTE GT GTE EQ NOTEQ
%left PLUS MINUS
%left TIMES FRAC 
%right POW		// POW è left?
%right NOT NEG

// Scopo della grammatica
%start start

// Tipo di uscita in caso di parsing corretto
%type <AST.Network> start

%%

// Produzioni

start:	directives
		preprocessing
		netowrk
		training
		validation
		EOF				{
							{
								Directives = $1;
								Preprocessing = $2;
								NetworkDefinition = $3;
								Training = $4;
								Validation = $5;
							}
						}

parameter :
	| ID COLON parameterValue		{ Parameter ($1, $3) }

parameterValue :
	| attributeList					{ $1 }
	| numList						{ $1 }
	| expression					{ $1 }

attributeList :
	| LB attributeInnerList RB						{ $2 }

attributeInnerList :
	| attributeElement								{ [$1] }
	| attributeInnerList COMMA attributeElement		{ $3 :: $1 }

attributeElement :
	| ATTID DOTS ATTID					{ $1, $3 }	
	| ID								{ $1 }
	| ATTID								{ $1 }

numberList :
	| LB numberInnerList RB						{ $2 }

numberInnerList :
	| numberElement								{ [$1] }
	| numberInnerList COMMA numberElement		{ $3 :: $1 }

numberElement :
	| NUMBER DOTS NUMBER				{ $1, $3 }	
	| NUMBER							{ $1 }

directives :
	|									{ [] }
	| parameter							{ [$1] }
	| directives NEWLINE parameter		{ $3 :: $1 }


preprocessing :
	| 
