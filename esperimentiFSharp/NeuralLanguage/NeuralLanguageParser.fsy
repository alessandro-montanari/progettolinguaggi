%{
open System
open AST

let cultureInfo = System.Globalization.CultureInfo.CreateSpecificCulture("en-us")

// Per errori vedi reportParseErrorAt nella grammatica di F#


%}

// Simboli terminali
%token <string> STRING
%token <string> QUOTEDSTRING	
%token <int> ATTINDEX
%token <int> INSTINDEX		

%token LP RP LCB RCB LB RB COMMA NEWLINE COLON DOTS
%token PREPROC TRAININGKEY VALIDATIONKEY PLOT ATTKEY INSTKEY TRAINSETKEY TESTSETKEY NETWORKKEY CLASSKEY LOADTRAIN LOADNET ASPECTKEY

%token <System.Double> DOUBLE
%token <bool> BOOLEAN
%token <int> INT

%token NOT 

%token EOF

// Scopo della grammatica
%start start

// Tipo di uscita in caso di parsing corretto
%type <AST.Network> start

%%

// Produzioni

start:	directives
		trainingSet
		classAttribute
		preprocessing
		network
		training
		validation
		EOF				{ { Directives = $1; TrainingSet = $2; ClassAttribute = $3; Preprocessing = $4; NetworkDefinition = $5; Training = $6; Validation = $7;} }

directives :
	| parameterListOpt						{ $1 }

trainingSet: TRAINSETKEY COLON QUOTEDSTRING 		{ $3 }

classAttribute : CLASSKEY COLON QUOTEDSTRING 		{ $3 }

preprocessing : PREPROC
				LCB
				attributeFilters								//TODO filtri per gli attributi SEMPRE prima di quelli per le istanze
				instanceFilters
				RCB					{ ($3, $4) }

network : NETWORKKEY STRING							
          LCB
		  parameterListOpt					
		  aspectListOpt
		  RCB 						{ ($2, $4, $5) }

training :	TRAININGKEY STRING
			LCB
			parameterListOpt					
		    aspectListOpt
		    RCB 					{ ($2, $4, $5) }

validation :
	|							{ ([], []) }	
	|	VALIDATIONKEY
		LCB
		parameterListOpt					
		aspectListOpt
		RCB 						{ ($3, $4) }


parameter : STRING COLON parameterValue		{ Parameter ($1, $3) }

parameterValue :
	| DOUBLE						{ Double $1 }
	| INT							{ Integer $1 }
	| BOOLEAN						{ Bool $1 }
	| QUOTEDSTRING					{ String $1 }
	| attributeList					{ AttList (true, $1) }
	| NOT attributeList				{ AttList (false, $2) }
	| instList						{ InstList (true, $1) }
	| NOT instList					{ InstList (false, $2) }

attributeList : LB attributeInnerList RB	{ $2 }

attributeInnerList :
	| attributeElement 								{ [$1] }
	| attributeElement COMMA attributeInnerList		{ $1 :: $3 }

attributeElement :
	| ATTINDEX DOTS ATTINDEX			{ AttSequence (Convert.ToInt32($1, cultureInfo), Convert.ToInt32($3, cultureInfo)) }	
	| QUOTEDSTRING						{ AttName $1 }
	| ATTINDEX							{ AttIndex (Convert.ToInt32($1, cultureInfo)) }

instList :
	| LB instInnerList RB				{ $2 }
	
instInnerList :
	| instElement						{ [$1] }
	| instElement COMMA instInnerList 	{ $1 :: $3 }

instElement :
	| INSTINDEX DOTS INSTINDEX          { InstSequence (Convert.ToInt32($1, cultureInfo), Convert.ToInt32($3, cultureInfo)) }	
	| INSTINDEX							{ InstIndex (Convert.ToInt32($1, cultureInfo)) }

parameterList :
	| parameter							{ [$1] }
	| parameter COMMA parameterList		{ $1 :: $3 }

parameterListOpt :
	|									{ [] }
	| parameterList	%prec STRING					{ $1 }

filter : 
	| STRING LP parameterListOpt RP		{ Filter ($1, $3) }

filterList :
	|								{ [] } 
	| filter						{ [$1] }
	| filter COMMA filterList		{ $1 :: $3 }

attributeFilters : ATTKEY LCB filterList RCB	{ $3 }
instanceFilters : INSTKEY LCB filterList RCB	{ $3 }

aspect : ASPECTKEY STRING					
		 LCB
		 parameterList
		 RCB						{ Aspect ($2, $4) }

aspectList :
	| aspect					{ [$1] }				
	| aspect aspectList			{ $1 :: $2 }

aspectListOpt :
	|				{ [] }
	| aspectList	{ $1 }