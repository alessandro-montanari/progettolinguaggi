%{
open System
open System.Collections.Generic
open NeuralTypes


let cultureInfo = System.Globalization.CultureInfo.CreateSpecificCulture("en-us")
let nominalDict = new Dictionary<int, string list>(HashIdentity.Structural)
let mutable elementIndex = 1
let extractValue str =
    let result = match nominalDict.TryGetValue(elementIndex) with 
                 | (true, strList) -> match List.tryFindIndex (fun el -> el = str) strList with
                                      | Some(index) -> AttributeValue.Nominal(str, (index+1)) 
                                      | None -> failwith "never here!!"
                 | _ -> AttributeValue.String str;
    elementIndex <- elementIndex+1
    result

%}

// Simboli terminali
%token <string> ID
%token <double> NUMBER
%token LCB RCB COMMA NEWLINE
%token RELKEY ATTKEY DATAKEY NUMKEY STRKEY MISSKEY MINUS
%token EOF

// Scopo della grammatica
%start start

// Tipo di uscita in caso di parsing corretto
%type <NeuralTypes.DataSet> start

%%

// Produzioni

start:	relation
		attributeList
		data
		EOF				{ nominalDict.Clear(); elementIndex <- 1; { Relation = $1; Attributes = $2; Data = $3 } }		// Quando ho finito svuoto il dizionario e inizializzo elementIndex

relation : RELKEY ID	{ $2 }

attributeList : 
	| attribute					{ elementIndex <- 1; [$1] }					// quando "chiudo" la lista degli attributi riporto elementIndex a 1
	| attribute attributeList	{ elementIndex <- 1; $1 :: $2 }

attribute : 
	| ATTKEY ID NUMKEY					{ elementIndex <- elementIndex+1; Attribute($2, AttributeType.Numeric) }
	| ATTKEY ID STRKEY					{ elementIndex <- elementIndex+1; Attribute($2, AttributeType.String) }
	| ATTKEY ID LCB nominalList RCB		{ nominalDict.Add(elementIndex, $4); elementIndex <- elementIndex+1; Attribute($2, AttributeType.Nominal $4) }		

nominalList :
	| ID				    { [$1] }
	| ID COMMA nominalList	{ $1 :: $3 }

data : DATAKEY instanceList		{ $2 }

instanceList :
	| instance					{ Seq.singleton (Instance($1)) }
	| instance instanceList		{ Seq.append (Seq.singleton (Instance($1))) $2  }

instance :
	| instanceElement							{ elementIndex <- 1; [$1] }			// quando "chiudo" una istanza riporto elementIndex a 1
	| instanceElement COMMA instance			{ elementIndex <- 1; $1 :: $3 }

instanceElement : 
	| ID						{ extractValue $1 }
	| NUMBER					{ elementIndex <- elementIndex+1; AttributeValue.Numeric $1 }
	| MINUS NUMBER				{ elementIndex <- elementIndex+1; AttributeValue.Numeric(Convert.ToDouble(-$2, cultureInfo)) }
	| MISSKEY					{ elementIndex <- elementIndex+1; AttributeValue.Missing }
