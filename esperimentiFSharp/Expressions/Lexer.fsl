{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf

let cultureInfo = System.Globalization.CultureInfo.CreateSpecificCulture("en-us")
}

// These are some regular expression definitions
let char = ['A' - 'Z' 'a' - 'z']
let digit = ['0'-'9']
let DoubleNumber = digit+ ('.' digit*)?(['e''E']['-']?digit+)?
let identifier = char(char|digit|'_')*
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let function = "exp" | "sin" | "cos" | "acos" | "asin" | "tan" | "atan" | "sinh" | "tanh" | "log" | "ln" | "floor" | "ceil" | "sqrt" | "abs"
let aggregateFunction = "mean" | "min" | "max" | "sd" | "sum" | "sumsquared"
let boolLiteral = "true" | "false"

rule tokenize = parse
	| whitespace		{ tokenize lexbuf }
	| newline			{ tokenize lexbuf }

	// Bool literal
	| boolLiteral		{ BOOLEAN(System.Boolean.Parse(lexeme lexbuf))}

	// Operators
	| function			{ FUNCTION(lexeme lexbuf) }	
	| aggregateFunction { AGGFUNCTION(lexeme lexbuf) }
	| "sumOfProducts"	{ SUMOFPRODUCTS }
	| identifier		{ ID(lexeme lexbuf) }
	| "+"				{ PLUS  }
	| "-"				{ MINUS }
	| "*"				{ ASTER }
	| "/"				{ SLASH }
	| "^"				{ POW }
	| '<'				{ LT }
	| "<="				{ LTE }
	| '>'				{ GT }
	| ">="				{ GTE }
	| "=="				{ EQ }
	| "!="				{ NOTEQ }
	| "!"				{ NOT }
	| "&&"				{ AND }
	| "||"				{ OR }

	// Misc
	| "("				{ LPAREN }
	| ")"				{ RPAREN }
	| '['				{ LB }
	| ']'				{ RB }
	| ','				{ COMMA }
	| ".."				{ DOTS }
	| ';'				{ SEMICOLON }

	// Numeric constants
	| DoubleNumber		{ DOUBLE (Double.Parse(lexeme lexbuf, cultureInfo)) }

	// EOF
	| eof   { EOF }

