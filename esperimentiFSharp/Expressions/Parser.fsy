%{

open Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Int32> INT32
%token <System.Double> DOUBLE
%token <bool> BOOLEAN
%token <string> FUNCTION
%token <string> AGGFUNCTION
%token <string> ID
%token PLUS MINUS ASTER	SLASH POW
%token AND OR NOT TRUE FALSE
%token LT LTE GT GTE EQ NOTEQ
%token LPAREN RPAREN LB RB COMMA DOTS SEMICOLON
%token SUMOFPRODUCTS
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.Equation > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Prog { Equation($1) }

Prog:
    | BExpr EOF					{ $1 }

BExpr:
	| BTerm						{ $1 }
	| BExpr OR BTerm			{ Or($1, $3)  }

BTerm:
	| CondExpr					{ $1 }
	| BTerm AND CondExpr		{ And($1, $3)  }

CondExpr:
	| Expr						{ $1 }
	| CondExpr LT Expr			{ Lt($1, $3)  }
	| CondExpr LTE Expr			{ Lte($1, $3)  }
	| CondExpr GT Expr			{ Gt($1, $3)  }
	| CondExpr GTE Expr			{ Gte($1, $3)  }
	| CondExpr EQ Expr			{ Eq($1, $3)  }
	| CondExpr NOTEQ Expr		{ NotEq($1, $3)  }
	
Expr: 
    | Expr PLUS  Term			{ Plus($1, $3)  }
    | Expr MINUS Term			{ Minus($1, $3) }
	| Expr POW Term				{ Pow($1, $3) }
    | Term						{ $1      }

Term:
    | Term ASTER Unary			{ Times($1, $3)  }
    | Term SLASH Unary			{ Divide($1, $3) }
    | Unary						{ $1 }

Unary:
    | Factor		{ $1 }
    | MINUS Factor	{ Negative($2) }
	| NOT Factor	{ Not($2) }
    
Factor:
	| BOOLEAN													{ Value(Boolean($1))}
    | DOUBLE													{ Value(Float($1))  }
    | INT32														{ Value(Integer($1)) }
	| ID														{ Value(Id($1)) }
    | LPAREN BExpr RPAREN										{ $2 }
	| FUNCTION LPAREN BExpr RPAREN								{ Value(Function($1, $3)) }
	| AGGFUNCTION LPAREN ExprList RPAREN						{ Value(AggregateFunction($1, $3)) }
	| SUMOFPRODUCTS LPAREN ExprList SEMICOLON ExprList RPAREN	{ Value(SumOfProducts($3, $5)) }

ExprList:
	| BExpr						{ [$1] }
	| LB ExprInnerList RB		{ $2 }

ExprInnerList:
	| BExpr						{ [$1] }
	| BExpr COMMA ExprList 		{ $1 :: $3 }
