%{

open ExpressionsAst

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Double> DOUBLE
%token <bool> BOOLEAN
%token <string> FUNCTION
%token <string> AGGFUNCTION
%token <string> ID
%token PLUS MINUS ASTER	SLASH POW
%token AND OR NOT TRUE FALSE
%token LT LTE GT GTE EQ NOTEQ
%token LPAREN RPAREN LB RB COMMA DOTS SEMICOLON
%token SUMOFPRODUCTS
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < ExpressionsAst.Expression > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.

start:
    | BOr EOF				{ $1 }

BOr:
	| BAnd					{ $1 }
	| BOr OR BAnd			{ Or($1, $3) }

BAnd:
	| CondExpr				{ $1 }
	| BAnd AND CondExpr		{ And($1, $3) }

CondExpr:
	| Additive						{ $1 }
	| CondExpr LT Additive			{ Lt($1, $3) }
	| CondExpr LTE Additive			{ Lte($1, $3) }
	| CondExpr GT Additive			{ Gt($1, $3) }
	| CondExpr GTE Additive			{ Gte($1, $3) }
	| CondExpr EQ Additive			{ Eq($1, $3) }
	| CondExpr NOTEQ Additive		{ NotEq($1, $3) }
	
Additive: 
    | Additive PLUS  Multiplicative		{ Plus($1, $3)  }
    | Additive MINUS Multiplicative		{ Minus($1, $3) }
	| Additive POW Multiplicative		{ Pow($1, $3) }
    | Multiplicative					{ $1 }

Multiplicative:
    | Multiplicative ASTER Unary		{ Times($1, $3)  }
    | Multiplicative SLASH Unary		{ Divide($1, $3) }
    | Unary								{ $1 }

Unary:
    | Value			{ $1 }
    | MINUS Value	{ Negative($2) }
	| NOT Value		{ Not($2) }
    
Value:
	| BOOLEAN													{ Value(Boolean($1))}
    | DOUBLE													{ Value(Double($1))  }
	| ID														{ Value(Id($1)) }
    | LPAREN BOr RPAREN											{ $2 }
	| FUNCTION LPAREN BOr RPAREN								{ Value(Function($1, $3)) }
	| AGGFUNCTION LPAREN ExprList RPAREN						{ Value(AggregateFunction($1, $3)) }
	| SUMOFPRODUCTS LPAREN ExprList SEMICOLON ExprList RPAREN	{ Value(SumOfProducts($3, $5)) }

ExprList:
	| BOr						{ [$1] }
	| LB ExprInnerList RB		{ $2 }

ExprInnerList:
	| BOr						{ [$1] }
	| BOr COMMA ExprInnerList 	{ $1 :: $3 }
