// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | SUMOFPRODUCTS
  | LPAREN
  | RPAREN
  | LB
  | RB
  | COMMA
  | DOTS
  | SEMICOLON
  | LT
  | LTE
  | GT
  | GTE
  | EQ
  | NOTEQ
  | AND
  | OR
  | NOT
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | ASTER
  | SLASH
  | POW
  | ID of (string)
  | AGGFUNCTION of (string)
  | FUNCTION of (string)
  | BOOLEAN of (bool)
  | DOUBLE of (System.Double)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SUMOFPRODUCTS
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LB
    | TOKEN_RB
    | TOKEN_COMMA
    | TOKEN_DOTS
    | TOKEN_SEMICOLON
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_GT
    | TOKEN_GTE
    | TOKEN_EQ
    | TOKEN_NOTEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_ASTER
    | TOKEN_SLASH
    | TOKEN_POW
    | TOKEN_ID
    | TOKEN_AGGFUNCTION
    | TOKEN_FUNCTION
    | TOKEN_BOOLEAN
    | TOKEN_DOUBLE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_BOr
    | NONTERM_BAnd
    | NONTERM_CondExpr
    | NONTERM_Additive
    | NONTERM_Multiplicative
    | NONTERM_Unary
    | NONTERM_Value
    | NONTERM_ExprList
    | NONTERM_ExprInnerList
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Ast.Expression ) 
